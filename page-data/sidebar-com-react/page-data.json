{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/sidebar-com-react/","result":{"data":{"site":{"siteMetadata":{"title":"Quarentenando","social":[{"name":"Twitter","url":"https://twitter.com/gatsbyjs"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"959f1377-a10b-563e-8f71-890e5e6dcd66","excerpt":"Recentemente precisei implementar um menu de navegação para um  PWA . Como estava\nfazendo do zero, sem nenhuma biblioteca de UI como…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/sidebar-com-react\",\n  \"title\": \"Criando uma SideBar com React\",\n  \"date\": \"2020-05-27\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recentemente precisei implementar um menu de navega\\xE7\\xE3o para um \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://web.dev/progressive-web-apps/\"\n  }), \"PWA\"), \". Como estava\\nfazendo do zero, sem nenhuma biblioteca de UI como \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://material-ui.com/\"\n  }), \"Material\"), \" ou \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react.semantic-ui.com/\"\n  }), \"Semantic\"), \",\\nfui pesquisar alguns exemplos pra me basear. Por\\xE9m, depois de alguma pesquisa, n\\xE3o encontrei nenhum exemplo bom\\ne simples o suficiente para o que estava procurando. Da\\xED a motiva\\xE7\\xE3o de escrever este post detalhando como\\neu implementei uma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" responsiva com React e espero que possa ser \\xFAtil para algu\\xE9m :)\"), mdx(\"p\", null, \"[\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Spoiler\"), \"]\", \" Segue aqui o componente pronto e funcional:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/fd6141b8885e0c83725fbc2d731dd61b/sidebar.gif\",\n    \"alt\": \"SideBar\",\n    \"title\": \"SideBar\"\n  }))), mdx(\"h3\", {\n    \"id\": \"criando-o-projeto\"\n  }, \"Criando o projeto\"), mdx(\"p\", null, \"Vamos criar um projeto React com o famoso \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/facebook/create-react-app\"\n  }), \"create-react-app\"), \" para\\nfins pr\\xE1ticos.\"), mdx(\"p\", null, \"Para criar o projeto, execute:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ npx create-react-app sidebar-app\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx\"), \" \\xE9 um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"package runner\"), \" que vem junto com o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"\"\n  }), \"Node\"), \". Ent\\xE3o tenha uma vers\\xE3o atualizada do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Node\"), \" instalado.\")), mdx(\"p\", null, \"Entre na pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sidebar-app\"), \" e pronto! Temos uma base de um projeto React pronta pra ser customizada.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\xC9 interessante remover alguns arquivos que j\\xE1 vem no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"create-react-app\"), \" por padr\\xE3o, como os logos na pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public\"), \"\\ne o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.css\"), \" na pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \". N\\xE3o esque\\xE7a de fazer as corre\\xE7\\xF5es necess\\xE1rias no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \".\")), mdx(\"p\", null, \"Agora inicie o servidor de desenvolvimento do \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/\"\n  }), \"Webpack\"), \" com o comando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ yarn start\\n\")), mdx(\"p\", null, \"Abra o navegador na rota \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:3000\"), \" e voc\\xEA dever\\xE1 ter uma tela em branco.\"), mdx(\"h3\", {\n    \"id\": \"criando-o-componente-sidebar\"\n  }, \"Criando o componente SideBar\"), mdx(\"p\", null, \"Primeiro, crie uma pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" dentro de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" e depois uma pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"O path fica \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" -> \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" -> \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"))), mdx(\"p\", null, \"Dentro de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" fica a l\\xF3gica e estilo do nosso componente.\"), mdx(\"p\", null, \"Come\\xE7ando pela l\\xF3gica, crie o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar.js\"), \" dentro de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" com a estrutura padr\\xE3o de um\\ncomponente React:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/SideBar/SideBar.js\\nimport React from \\\"react\\\";\\n\\nconst SideBar = () => {\\n  return (\\n    <nav>\\n      <ul></ul>\\n    </nav>\\n  );\\n};\\n\\nexport default SideBar;\\n\")), mdx(\"p\", null, \"Pensando na estrutura do componente, nossa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sidebar\"), \" vai ser basicamente um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav>\"), \" com uma lista de itens.\\nEssa lista de itens na verdade ser\\xE1 uma lista de um outro componente, o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SidebarItem\"), \"\\u2026mas n\\xF3s vamos chegar l\\xE1.\"), mdx(\"p\", null, \"Agora vamos estilizar o componente. Aqui, seguirei a filosofia de \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.moblee.com.br/blog/mobile-first-principais-vantagens/\"\n  }), \"mobile first\"), \",\\nisto \\xE9, o estilo sempre \\xE9 aplicado pensando na visualiza\\xE7\\xE3o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mobile\"), \" e ent\\xE3o ajustado pra visualiza\\xE7\\xE3o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"desktop\"), \". E\\nvou utilizar \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/pt-BR/docs/Web/CSS/var\"\n  }), \"vari\\xE1veis CSS\"), \" por ser um recurso poderoso\\ndo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS\"), \" e que hoje j\\xE1 possui um \\xF3timo suporte nos principais navegadores. As vari\\xE1veis ser\\xE3o importantes para\\narmazenar, por exemplo, cores e espa\\xE7amento dos nossos componentes.\"), mdx(\"p\", null, \"Para as vari\\xE1veis ficarem dispon\\xEDveis por toda a aplica\\xE7\\xE3o, crie-as no arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/index.css\"), \" (j\\xE1 existente).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/index.css */\\n:root {\\n  --gray-dark: #37474f;\\n\\n  --sidebar-width: 80px;\\n  --sidebar-height: 60px;\\n\\n  --sidebar-z-index: 1000;\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Possivelmente j\\xE1 ter\\xE1 um c\\xF3digo existente no arquivo, pode deix\\xE1-lo a\\xED ou apagar se preferir.\")), mdx(\"p\", null, \"A propriedade \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":root\"), \" faz com que todas as vari\\xE1veis definidas ali fiquem dispon\\xEDveis em todo o escopo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"html\"), \", ou seja,\\nem toda a aplica\\xE7\\xE3o.\"), mdx(\"p\", null, \"Crie um arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar.css\"), \" no mesmo n\\xEDvel do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar.js\"), \" com o seguinte c\\xF3digo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/components/SideBar/SideBar.css */\\n.sideBarContainer {\\n  background-color: var(--gray-dark);\\n  width: 100vw;\\n  position: fixed;\\n  bottom: 0;\\n  z-index: var(--sidebar-z-index);\\n  box-shadow: var(--sidebar-shadow-mobile);\\n}\\n\")), mdx(\"p\", null, \"Agora precisamos import\\xE1-lo no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar.js\"), \" e atribuir essa classe a tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav>\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBar/SideBar.js\\nimport React from \\\"react\\\";\\n\\nimport \\\"./SideBar.css\\\";\\n\\nconst SideBar = () => {\\n  return (\\n    <nav className=\\\"sideBarContainer\\\">\\n      <ul></ul>\\n    </nav>\\n  );\\n};\\n\\nexport default SideBar;\\n\")), mdx(\"p\", null, \"E para visualizar o componente, importe-o no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/App.js\\nimport React from \\\"react\\\";\\n\\nimport SideBar from \\\"./components/SideBar/SideBar\\\";\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <SideBar />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\")), mdx(\"p\", null, \"Perceba que temos um detalhe pra resolver. Na visualiza\\xE7\\xE3o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"desktop\"), \" temos que fazer com que o componente apare\\xE7a na\\nvertical, pois por enquanto est\\xE1 na horizontal (igual o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mobile\"), \").\\nPara isso, vamos usar \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/pt-BR/docs/Web/Guide/CSS/CSS_Media_queries\"\n  }), \"media query\"), \", uma\\npropriedade responsiva do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS\"), \". Voltando ent\\xE3o ao arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar.css\"), \", adicione o seguinte bloco de c\\xF3digo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/components/SideBar/SideBar.css */\\n@media only screen and (min-width: 1200px) {\\n  .sideBarContainer {\\n    width: var(--sidebar-width);\\n    height: 100vh;\\n    box-shadow: var(--sidebar-shadow-desktop);\\n    transition: 300ms ease;\\n  }\\n\\n  .sideBarContainer:hover {\\n    width: 250px;\\n  }\\n}\\n\")), mdx(\"p\", null, \"Nosso componente t\\xE1 tomando forma! \\\\o/ Um detalhe bacana de adicionar, e que \\xE9 bastante comum em\\ncomponentes do tipo, seria um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overlay\"), \" no evento de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \", isto \\xE9, ao abrir a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" o resto da tela\\nfica com uma camada mais escura sobre, destacando a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \".\"), mdx(\"p\", null, \"Isso \\xE9 simples de fazer. Para adicionar o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"overlay\"), \", crie uma tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \" no componente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBar/SideBar.js\\nconst SideBar = () => {\\n  return (\\n    <>\\n      <div className=\\\"sideBarOverlay\\\"></div>\\n      <nav className=\\\"sideBarContainer\\\">\\n        <ul></ul>\\n      </nav>\\n    </>\\n  );\\n};\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Perceba que tivemos que colocar tudo dentro de uma tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<>\"), \". Esse \\xE9 um componente default do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"React\"), \" que eles\\nchamam de \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/fragments.html\"\n  }), \"Fragment\"), \". \\xC9 \\xFAtil quando n\\xE3o se quer colocar tudo dentro de\\num \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \", j\\xE1 que o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"React\"), \" n\\xE3o aceita que o componente tenha 2 ou mais \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tags\"), \" no mesmo n\\xEDvel.\")), mdx(\"p\", null, \"E no arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar.css\"), \" adicione a classe:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/components/SideBar/SideBar.css */\\n@media only screen and (min-width: 1200px) {\\n  .sideBarOverlay {\\n    position: fixed;\\n    height: 100vh;\\n    width: 100%;\\n    background: rgba(0, 0, 0, 0.3);\\n    z-index: var(--sidebar-z-index);\\n    transition: 200ms ease;\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/4dc5a4ae700c783ee3bb76a6149c2ed4/sidebar-simple.gif\",\n    \"alt\": \"SideBar Simples\",\n    \"title\": \"SideBar Simple\"\n  }))), mdx(\"p\", null, \"Sucesso! Temos um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"overlay\"), \". Perceba, por\\xE9m, que dessa maneira o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"overlay\"), \" \\xE9 sempre aplicado, ao inv\\xE9s de aplicarmos ele apenas\\nno \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \" da \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \". Para isso, tal tratamento tem que ser feito no pr\\xF3prio componente, pois o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS\"), \" n\\xE3o consegue lidar\\ncom a l\\xF3gica de \\u201Cse h\\xE1 hover nesse elemento aplique um estilo em outro elemento\\u201D. Esse tipo de tratamento tem\\nque ser feito com \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \".\"), mdx(\"p\", null, \"Uma coisa bem poderosa que as vers\\xF5es mais recentes do React (a partir da \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/facebook/react/releases\"\n  }), \"vers\\xE3o 16.8\"), \"\\npra ser mais exato) adicionou foram os \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-overview.html\"\n  }), \"hooks\"), \". Os \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hooks\"), \" permitem que a gente reutilize\\nl\\xF3gicas comuns como fun\\xE7\\xF5es.\"), mdx(\"p\", null, \"Aqui, vou criar um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hook\"), \" pro evento de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \". \\xC9 um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hook\"), \" que s\\xF3 vai ser utilizado no componente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" mas que poderia\\ntranquilamente ser usado em qualquer outro componente da aplica\\xE7\\xE3o.\"), mdx(\"p\", null, \"Crie ent\\xE3o uma pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hooks/\"), \" dentro de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/\"), \" e adicione o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useHover.js\"), \" com o seguinte c\\xF3digo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/hooks/useHover.js\\nimport { useRef, useState, useEffect } from \\\"react\\\";\\n\\nconst useHover = () => {\\n  const [value, setValue] = useState(false);\\n\\n  const ref = useRef(null);\\n\\n  const handleMouseOver = () => setValue(true);\\n  const handleMouseOut = () => setValue(false);\\n\\n  useEffect(() => {\\n    const node = ref.current;\\n    if (node) {\\n      node.addEventListener(\\\"mouseover\\\", handleMouseOver);\\n      node.addEventListener(\\\"mouseout\\\", handleMouseOut);\\n\\n      return () => {\\n        node.removeEventListener(\\\"mouseover\\\", handleMouseOver);\\n        node.removeEventListener(\\\"mouseout\\\", handleMouseOut);\\n      };\\n    }\\n  }, []);\\n\\n  return [ref, value];\\n};\\n\\nexport default useHover;\\n\")), mdx(\"p\", null, \"Esse \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hook\"), \" vai nos retornar um valor e uma refer\\xEAncia. O valor \\xE9 um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"booleano\"), \" que tem valor \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \"\\nno hover e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"falso\"), \" caso contr\\xE1rio. A refer\\xEAncia \\xE9 o elemento que queremos usar como refer\\xEAncia pro\\nevento de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \". Vamos us\\xE1-lo ent\\xE3o no nosso componente. Para isso, basta import\\xE1-lo e aplicar a l\\xF3gica\\nde \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \" na tag do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"overlay\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBar/SideBar.js\\n...\\nimport useHover from \\\"../../hooks/useHover\\\";\\n\\nconst SideBar = () => {\\n  const [hoverRef, isHovered] = useHover();\\n  ...\\n\\n  return (\\n    <>\\n      <div className={`${isHovered ? \\\"sideBarOverlay\\\" : null}`}></div>\\n      <nav className=\\\"sideBarContainer\\\" ref={hoverRef}>\\n      ...\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Se \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"isHovered\"), \" nos retorna \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", ent\\xE3o aplique o estilo de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"overlay\"), \", sen\\xE3o n\\xE3o aplique nenhum estilo.\")), mdx(\"p\", null, \"Considere nosso componente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" pronto. \\u201CMas e no mobile?! O componente nem altura tem\\u2026\\u201D\\nCalma jovem, nosso componente vai ganhar altura assim que colocarmos coisas nele. E essas coisas s\\xE3o inst\\xE2ncias\\ndo componente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBarItem\"), \".\"), mdx(\"h3\", {\n    \"id\": \"criando-o-componente-sidebaritem\"\n  }, \"Criando o componente SideBarItem\"), mdx(\"p\", null, \"Precisamos agora criar os elementos da lista contida no componente \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \". Eu vou chamar esses elementos\\nde \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBarItem\"), \" e eles tamb\\xE9m ser\\xE3o um componente \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"React\"), \".\"), mdx(\"p\", null, \"Esse componente, basicamente, ser\\xE1 um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<li>\"), \" com um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\xEDcone\"), \", um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"texto\"), \" (na visualiza\\xE7\\xE3o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"desktop\"), \") e um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"link\"), \".\\nCrie ent\\xE3o a pasta \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBarItem\"), \" (dentro de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \") com o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBarItem.js\"), \" e este com a\\nseguinte estrutura:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from \\\"react\\\";\\n\\nconst SideBarItem = ({ icon, text, to }) => {\\n  return (\\n    <li className=\\\"itemContainer\\\">\\n      <a className=\\\"itemLink\\\" href={to}>\\n        <div>\\n          <span>\\n            <i className={icon}></i>\\n          </span>\\n        </div>\\n        <div className=\\\"itemText\\\">\\n          <span>{text}</span>\\n        </div>\\n      </a>\\n    </li>\\n  );\\n};\\n\\nexport default SideBarItem;\\n\")), mdx(\"p\", null, \"Ent\\xE3o nosso componente recebe como \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"props\"), \" um \\xEDcone, um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"text\"), \" e um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"link\"), \". Para os \\xEDcones, utilizaremos a\\nbiblioteca \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fontawesome.com/icons?d=gallery\"\n  }), \"Font Awesome\"), \", que nos disponibiliza alguns \\xEDcones\\ngratuitamente.\"), mdx(\"p\", null, \"Existem v\\xE1rias maneiras de usar o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Font Awewome\"), \". A maneira que eu achei mais conveniente, pois envolve\\nmenos c\\xF3digo, foi a de acessar o kit de \\xEDcones via CDN. Por\\xE9m, esta maneira pode ser um pouco chata por\\nnecessitar criar uma conta no site do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Font Awesome\"), \". Caso queira seguir dessa maneira, acesse\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fontawesome.com/start\"\n  }), \"aqui\"), \" pra se cadastrar. Uma outra maneira \\xE9 instalar os pacotes oficiais \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" ou\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"npm\"), \" a partir deste \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/FortAwesome/react-fontawesome\"\n  }), \"reposit\\xF3rio\"), \".\"), mdx(\"p\", null, \"Seguindo ent\\xE3o com o CDN, ap\\xF3s o cadastro o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Font Awesome\"), \" ir\\xE1 te fornecer um link pra ser referenciado\\nno arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"public/index.html\"), \". Apenas coloque o link neste arquivo como:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<head>\\n  ...\\n  <script src=\\\"{link}\\\" crossorigin=\\\"anonymous\\\"></script>\\n</head>\\n\")), mdx(\"p\", null, \"Feito isso, agora podemos usar a tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<i>\"), \" com a classe associada a algum \\xEDcone do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Font Awesome\"), \" para\\ngerarmos um \\xEDcone no nosso componente.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Esta classe \\xE9 a props \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"icon\"), \" do componente \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBarItem\"))), mdx(\"p\", null, \"Precisamos agora estilizar minimamente nosso componente. Por enquanto ele tem as classes \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"itemContainer\"), \",\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"itemLink\"), \" e \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"itemText\"), \". Para isso, crie um arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBarItem.css\"), \" na pasta do componente com o\\nseguinte conte\\xFAdo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".itemLink {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-around;\\n  height: var(--sidebar-item-height);\\n  border-radius: 4px;\\n  transition: 0.2s ease;\\n  margin: 8px;\\n  text-decoration: none;\\n  font-weight: 600;\\n  color: #fff;\\n}\\n\\n.itemLink:hover {\\n  background-color: var(--gray-darkest);\\n}\\n\\n.itemText {\\n  display: none;\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As propriedades \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"text-decoration\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"font-weight\"), \" e \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"color\"), \" ser\\xE3o aplicadas ao texto que aparecer\\xE1 no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \".\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Basicamente alinhamos os itens (\\xEDcone e texto) na horizontal e setamos uma altura (pensando na visualiza\\xE7\\xE3o\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mobile\"), \").\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"N\\xE3o esque\\xE7a de importar os estilos no componente:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import \\\"./SideBarItem.css\\\";\"))), mdx(\"p\", null, \"Perceba tamb\\xE9m que adicionamos mais algumas vari\\xE1veis CSS. Portanto, atualize o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.css\"), \" com elas:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/index.css */\\n:root {\\n  ...\\n  --gray-darkest: #222b2f;\\n  ...\\n  --sidebar-item-height: 50px;\\n  --sidebar-item-height-desktop: 70px;\\n\")), mdx(\"p\", null, \"Vamos testar ent\\xE3o o componente e ver se esses estilos precisam de algum ajuste ou n\\xE3o. A \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" desse\\nexemplo possui 4 itens, mas pode ter mais ou menos de acordo com a necessidade. Para ficar uma estrutura\\nflex\\xEDvel, crie um arquivo pra armazenar esses itens. No meu caso, vou criar na mesma pasta do componente\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBar/items.js\\nconst items = [\\n  { id: 1, text: \\\"Home\\\", icon: \\\"fas fa-home\\\", to: \\\"/\\\" },\\n  {\\n    id: 2,\\n    text: \\\"Localiza\\xE7\\xE3o\\\",\\n    icon: \\\"fas fa-map-marked-alt\\\",\\n    to: \\\"/localizacao\\\",\\n  },\\n  { id: 3, text: \\\"Contato\\\", icon: \\\"fas fa-paper-plane\\\", to: \\\"/contato\\\" },\\n  { id: 4, text: \\\"Entrar\\\", icon: \\\"fa fa-sign-in\\\", to: \\\"/login\\\" },\\n];\\n\\nexport default items;\\n\")), mdx(\"p\", null, \"Agora importe e renderize esses itens no componente \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBar/SideBar.js\\n...\\nimport SideBarItem from \\\"../SideBarItem/SideBarItem\\\";\\nimport items from \\\"./items\\\";\\n\\n\\nconst SideBar = () => {\\n  ...\\n  <ul>\\n    {items.map((item) => {\\n      return (\\n        <SideBarItem\\n          key={item.id}\\n          text={item.text}\\n          icon={item.icon}\\n          to={item.to}\\n        />\\n      );\\n    })}\\n  </ul>\\n\")), mdx(\"p\", null, \"T\\xE1 chegando! Agora precisamos fazer uns ajustes. Primeiro, perceba que os itens est\\xE3o na vertical na\\nvisualiza\\xE7\\xE3o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mobile\"), \". Al\\xE9m disso, a lista de \\xEDcones est\\xE1 com o estilo padr\\xE3o da tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \". Vamos arrumar isso.\\nNo arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar.css\"), \", adicione os estilos:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/components/SideBar/SideBar.css */\\n\\n.sideBarList {\\n  display: flex;\\n  justify-content: space-around;\\n  list-style: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\n@media only screen and (min-width: 1200px) {\\n  ...\\n  .sideBarList {\\n    display: flex;\\n    flex-direction: column;\\n    margin-top: var(--spacing-medium);\\n  }\\n\")), mdx(\"p\", null, \"E adicione a classe na tag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBar/SideBar.js\\n...\\n<ul className=\\\"sideBarList\\\">\\n  {items.map((item) => {\\n...\\n\")), mdx(\"p\", null, \"Parece quase pronto agora. Um detalhe importante, \\xE9 que a \\xE1rea clic\\xE1vel/toc\\xE1vel do \\xEDcone na visualiza\\xE7\\xE3o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mobile\"), \"\\nest\\xE1 muito pequena. Para aumentar essa \\xE1rea, apenas fa\\xE7a com que o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"container\"), \" do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<li>\"), \" ocupe todo o espa\\xE7o\\ndispon\\xEDvel. Isso \\xE9 facilmente alcan\\xE7ado adicionando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/components/SideBarItem/SideBarItem.css */\\n.itemContainer {\\n  flex: 1;\\n}\\n...\\n\")), mdx(\"p\", null, \"E por \\xFAltimo (ufa!), precisamos adicionar o texto na visualiza\\xE7\\xE3o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"desktop\"), \" e no evento de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \".\\nUm jeito poss\\xEDvel de fazer isso \\xE9 adicionar dinamicamente uma classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CSS\"), \" no evento de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hover\"), \" a partir do\\nnosso hook \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useHover\"), \". O componente pai \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" j\\xE1 utiliza ele, e como queremos que o texto de todos os itens\\napare\\xE7am ao mesmo tempo, passaremos esse evento como uma \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"props\"), \" pros componentes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBarItem\"), \".\"), mdx(\"p\", null, \"Ent\\xE3o no componente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBar/SideBar.js\\n<SideBarItem\\n  ...\\n  hover={isHovered}\\n/>\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"N\\xE3o esque\\xE7a de adicionar a props no componente filho \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"SideBarItem\"))), mdx(\"p\", null, \"Criando a classe \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"CSS\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* src/components/SideBarItem/SideBarItem.css */\\n@media only screen and (min-width: 1200px) {\\n  .itemTextHover {\\n    display: block;\\n    width: 50%;\\n  }\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A propriedade \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"width\"), \" aqui serve pra deixar os textos e \\xEDcones alinhados entre si\")), mdx(\"p\", null, \"E agora adicione a classe dinamicamente:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// src/components/SideBarItem/SideBarItem.js\\n...\\n  <div className={`itemText ${hover ? `itemTextHover` : null}`}>\\n    <span>{text}</span>\\n  </div>\\n...\\n\")), mdx(\"p\", null, \"E pronto! \\\\o/ Temos uma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SideBar\"), \" no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"desktop\"), \" e uma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppBar\"), \" no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mobile\"), \", tudo no mesmo componente :)\"), mdx(\"p\", null, \"Para ver o c\\xF3digo completo, acesse este \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vpalmerini/sidebar\"\n  }), \"reposit\\xF3rio\"), \".\"), mdx(\"p\", null, \"E se voc\\xEA tem alguma sugest\\xE3o pra esse post (ou at\\xE9 mesmo pra esse blog) voc\\xEA \\xE9 mais do que bem-vindo para abrir uma \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"issue\"), \" neste \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vpalmerini/blog\"\n  }), \"reposit\\xF3rio\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/sidebar-com-react/","title":"Criando uma SideBar com React","tags":[],"keywords":[],"date":"May 27, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"1067bbb3-7109-590a-8a3b-f1b27e0e7b0f","excerpt":"Quem nunca, depois de terminar uma primeira versão de um projeto, por exemplo, deixou de criar ou completar\no  README  por não achá-lo…","slug":"/escrevendo-um-bom-readme/","title":"Escrevendo um bom README","date":"May 25, 2020"},"next":{"__typename":"MdxBlogPost","id":"00b1614f-898c-51d0-a304-50b441e029ca","excerpt":"Se você já mexeu pelo menos um pouquinho com desenvolvimento web, então com certeza já ouviu falar ou até já configurou o  Babel  em um…","slug":"/introduzindo-o-babel/","title":"Por que precisamos do Babel?","date":"September 15, 2020"}},"pageContext":{"id":"959f1377-a10b-563e-8f71-890e5e6dcd66","previousId":"1067bbb3-7109-590a-8a3b-f1b27e0e7b0f","nextId":"00b1614f-898c-51d0-a304-50b441e029ca"}},"staticQueryHashes":["4198970465","764694655"]}