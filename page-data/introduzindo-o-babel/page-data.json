{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/introduzindo-o-babel/","result":{"data":{"site":{"siteMetadata":{"title":"Quarentenando","social":[{"name":"Twitter","url":"https://twitter.com/gatsbyjs"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"00b1614f-898c-51d0-a304-50b441e029ca","excerpt":"Se você já mexeu pelo menos um pouquinho com desenvolvimento web, então com certeza já ouviu falar ou até já configurou o  Babel  em um…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/introduzindo-o-babel\",\n  \"title\": \"Por que precisamos do Babel?\",\n  \"date\": \"2020-09-15\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Se voc\\xEA j\\xE1 mexeu pelo menos um pouquinho com desenvolvimento web, ent\\xE3o com certeza j\\xE1 ouviu falar ou at\\xE9 j\\xE1 configurou o \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Babel\"), \" em um projeto \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \".\\nMas afinal, pra que serve o \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Babel\"), \"? E que raios ele tem a ver com o \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"webpack\"), \"?\"), mdx(\"p\", null, \"Antes de come\\xE7ar a falar sobre o Babel de fato, primeiro \\xE9 interessante entender o problema na web que ele tenta resolver.\\nComo voc\\xEA deve saber, os navegadores \\u201Centendem\\u201D \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \", e como toda linguagem, o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" possui diferentes vers\\xF5es. De tempos em tempos novas vers\\xF5es s\\xE3o lan\\xE7adas.\\nE esse \\u201Cde tempos em tempos\\u201D virou um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"anualmente\"), \" a partir de 2015, quando foi lan\\xE7ada a vers\\xE3o 6 do ECMAScript (especifica\\xE7\\xE3o do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \"), mais conhecida como ES6 ou ES2015.\"), mdx(\"p\", null, \"Tal vers\\xE3o trouxe grandes mudan\\xE7as na linguagem em rela\\xE7\\xE3o \\xE0s vers\\xF5es anteriores e n\\xE3o s\\xF3 isso, o \\xF3rg\\xE3o respons\\xE1vel por lan\\xE7ar essas mudan\\xE7as, o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tc39.es/\"\n  }), \"TC39\"), \",\\nadotou o h\\xE1bito de lan\\xE7ar uma nova vers\\xE3o do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" (a partir de 2015) anualmente. Beleza, mas o que isso tem a ver com o Babel? Calma, vamos chegar l\\xE1.\"), mdx(\"p\", null, \"Bom, imagine esse cen\\xE1rio em que uma nova vers\\xE3o do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \", com novas features e especifica\\xE7\\xF5es, \\xE9 lan\\xE7ada todo ano.\\nOs navegadores que lutem, n\\xE3o \\xE9 mesmo? Pois \\xE9 isso o que vem acontecendo. Os navegadores em geral t\\xEAm dificuldade pra acompanhar esse avan\\xE7o da linguagem, e por isso muitas\\ndas features do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" rec\\xE9m-lan\\xE7adas acabam demorando pra obter um suporte razo\\xE1vel dos navegadores (IE11 que o diga rsrs).\\nAl\\xE9m disso, o ciclo de releases dos navegadores e tamb\\xE9m as engines que eles utilizam s\\xE3o diferentes entre si. Tudo isso influencia no suporte que um navegador pode oferecer em um determinado momento.\"), mdx(\"p\", null, \"Esse \\xE9 o problema que o Babel vem pra resolver \\\\o/\\nBasicamente ele permite que a gente use essas novas features mais recentes do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" sem perder o suporte do nosso c\\xF3digo pra vers\\xF5es n\\xE3o t\\xE3o recentes dos navegadores.\\nNo fundo, o que acontece \\xE9 um processo de transpila\\xE7\\xE3o, isto \\xE9, o c\\xF3digo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" moderno \\xE9 transformado para um c\\xF3digo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" n\\xE3o t\\xE3o moderno, mas que tem um suporte bem maior.\\nMais sobre transpila\\xE7\\xE3o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pt.stackoverflow.com/questions/189894/o-que-%C3%A9-transpila%C3%A7%C3%A3o\"\n  }), \"aqui\"), \".\"), mdx(\"p\", null, \"Pra mostrar que isso realmente funciona e que eu n\\xE3o t\\xF4 enganando voc\\xEA, vou fazer um exemplo pr\\xE1tico.\\nO que eu vou fazer, basicamente, vai ser pegar um c\\xF3digo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" com features recentes e servir esse c\\xF3digo de entrada pro Babel transpilar e gerar um novo c\\xF3digo como sa\\xEDda.\\nBora ver se d\\xE1 certo.\"), mdx(\"p\", null, \"A primeira coisa que eu vou fazer \\xE9 criar uma pasta pro nosso projeto de exemplo e inici\\xE1-lo como um reposit\\xF3rio \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/get-npm\"\n  }), \"npm\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"O npm \\xE9 um gerenciador de pacotes JavaScript e vem junto com o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/pt-br/\"\n  }), \"Node\"), \".\")), mdx(\"p\", null, \"O meu projeto vai ser instanciar doguinhos! \\uD83D\\uDC36\\uD83D\\uDC15\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"# crio a pasta e entro nela\\n$ mkdir dogs && cd dogs\\n\\n# inicio o reposit\\xF3rio npm\\n$ npm init -y\\n\")), mdx(\"p\", null, \"Agora posso criar um arquivo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" pra implementar a classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog\"), \" e criar inst\\xE2ncias!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Dog.js\\nclass Dog {\\n  constructor(name, breed) {\\n    this.name = name;\\n    this.breed = breed; // \\\"breed\\\" \\xE9 ra\\xE7a em ingl\\xEAs rsrs\\n  }\\n\\n  printDog() {\\n    console.log(`${this.name} \\xE9 da ra\\xE7a ${this.breed}`);\\n  }\\n}\\n\\nconst greg = new Dog(\\\"Greg\\\", \\\"Vira-lata\\\");\\ngreg.printDog();\\n\")), mdx(\"p\", null, \"Pra executar e mostrar que o c\\xF3digo funciona, basta fazer:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"node Dog.js\\n# \\\"Greg \\xE9 da ra\\xE7a Vira-lata\\\"\\n\")), mdx(\"p\", null, \"Perceba que nesse c\\xF3digo estamos utilizando algumas features recentes do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \", como \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Classes\"\n  }), \"classes\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/template_strings\"\n  }), \"template-strings\"), \" e \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/const\"\n  }), \"const\"), \".\"), mdx(\"p\", null, \"E por que o Node entende essas features?! Basicamente porque ele usa a mesma engine do Google Chrome, a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/reactbrasil/como-o-javascript-funciona-dentro-da-engine-v8-5-dicas-sobre-como-escrever-c%C3%B3digo-otimizado-e05af6088fd5\"\n  }), \"V8\"), \",\\nque de modo geral \\xE9 a engine com maior suporte pro \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" hoje.\\nNa \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/pt-br/docs/es6/\"\n  }), \"documenta\\xE7\\xE3o do Node\"), \", eles explicam um pouquinho melhor sobre isso.\"), mdx(\"p\", null, \"Bom, beleza! Temos nosso c\\xF3digo \\u201Cmoderno\\u201D. Bora transpilar ele com a ajuda do Babel.\\nPra isso, precisamos instalar alguns pacotes. S\\xE3o eles:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-core\"\n  }), \"@babel/core\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-cli\"\n  }), \"@babel/cli\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-plugin-transform-classes\"\n  }), \"@babel/plugin-transform-classes\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-plugin-transform-template-literals\"\n  }), \"@babel/plugin-transform-template-literals\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-plugin-transform-block-scoping\"\n  }), \"@babel/plugin-transform-block-scoping\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"@babel/core \\xE9 o pacote base do Babel e @babel/cli \\xE9 o pacote que permite que a gente execute comandos do Babel pelo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"terminal\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Os outros pacotes s\\xE3o o que a gente pode chamar de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"plugins\"), \" do Babel e cada plugin faz uma transforma\\xE7\\xE3o espec\\xEDfica.\\nEnt\\xE3o, por exemplo, o pacote \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@babel/plugin-transform-classes\"), \" transforma classes do ES6+ (que estamos usando no nosso c\\xF3digo) pra fun\\xE7\\xF5es construtoras (possuem maior suporte nos navegadores).\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm install --save-dev @babel/core \\\\\\n                       @babel/cli \\\\\\n                       @babel/plugin-transform-classes \\\\\\n                       @babel/plugin-transform-template-literals \\\\\\n                       @babel/plugin-transform-block-scoping\\n\")), mdx(\"p\", null, \"Ap\\xF3s isso, o seu \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" deve estar mais ou menos assim:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"// package.json\\n...\\n{\\n    \\\"devDependencies\\\": {\\n      \\\"@babel/cli\\\": \\\"^7.11.6\\\",\\n      \\\"@babel/core\\\": \\\"^7.11.6\\\",\\n      \\\"@babel/plugin-transform-block-scoping\\\": \\\"^7.11.1\\\",\\n      \\\"@babel/plugin-transform-classes\\\": \\\"^7.10.4\\\",\\n      \\\"@babel/plugin-transform-template-literals\\\": \\\"^7.10.5\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"S\\xF3 uma coisa antes de finalmente transpilarmos o c\\xF3digo. Precisamos indicar pro Babel quais plugins ele deve usar na transpila\\xE7\\xE3o.\\nPra isso, basta criar o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".babelrc\"), \" com o seguinte c\\xF3digo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"// .babelrc\\n{\\n  \\\"plugins\\\": [\\n    \\\"@babel/plugin-transform-classes\\\",\\n    \\\"@babel/plugin-transform-template-literals\\\",\\n    \\\"@babel/plugin-transform-block-scoping\\\"\\n  ]\\n}\\n\")), mdx(\"p\", null, \"E agora o grande momento de transpilar o nosso c\\xF3digo \\\\o/ \\xC9 s\\xF3 fazer:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npx babel Dog.js --out-file Dog-old.js\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"O Babel recebe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog.js\"), \" como entrada e gera \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dog-old.js\"), \" como sa\\xEDda\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A flag \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--out-file\"), \" \\xE9 necess\\xE1ria se voc\\xEA quiser gerar a sa\\xEDda em outro arquivo, sen\\xE3o a sa\\xEDda vai ser pelo console mesmo\")), mdx(\"p\", null, \"E agora vemos que o c\\xF3digo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" \\u201Cantigo\\u201D \\xE9 bem diferente do que o que escrevemos. Ser\\xE1 que ele funciona?!\\nPra testar, \\xE9 s\\xF3 executar ele com o Node:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"node Dog-old.js\\n# \\\"Greg \\xE9 da ra\\xE7a Vira-lata\\\"\\n\")), mdx(\"p\", null, \"E voil\\xE1! O c\\xF3digo se mant\\xE9m funcional, como deveria ser. Esse \\xE9 o grande poder do Babel! (e de outros transpiladores da comunidade).\"), mdx(\"p\", null, \"E antes de encerrar o post, tem uma dica muito importante que voc\\xEA deve saber.\\nQuando instalamos os pacotes, tivemos que analisar feature por feature e instalar um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"plugin\"), \" pra cada uma, certo?\\nO nosso c\\xF3digo aqui \\xE9 pequeno. Mas imagine um c\\xF3digo extenso, com v\\xE1rios arquivos, por exemplo\\u2026teria que instalar plugin por plugin??\\nA resposta \\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\\xE3o!\"), \" Pra resolver isso, existem pacotes pr\\xE9-configurados que j\\xE1 v\\xEAm com v\\xE1rios desses plugins instalados. Podemos citar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-preset-env\"\n  }), \"@babel/preset-env\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-preset-react\"\n  }), \"@babel/preset-react\"), \" - \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"c\\xF3digo React\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-preset-typescript\"\n  }), \"@babel/preset-typescript\"), \" - \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"c\\xF3digo TypeScript\"))), mdx(\"p\", null, \"E a\\xED pra us\\xE1-los, basta instalar igual os plugins. No caso do nosso projeto, ficaria:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm install --save-dev @babel/core \\\\\\n                       @babel/cli \\\\\\n                       @babel/preset-env\\n\")), mdx(\"p\", null, \"E no arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".babelrc\"), \", ao inv\\xE9s de referenciarmos \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"plugins\"), \", agora referenciamos \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"presets\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"presets\\\": [\\\"@babel/preset-env\\\"]\\n}\\n\")), mdx(\"p\", null, \"Bem mais simples n\\xE9! E a\\xED \\xE9 s\\xF3 rodar o Babel e ver que tudo est\\xE1 funcionando do mesmo jeito \\\\o/\"), mdx(\"p\", null, \"Muito em breve vou fazer um post espec\\xEDfico sobre o \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://webpack.js.org/\"\n  }), \"webpack\"), \" e tentar explicar que raios o Babel tem a ver com ele.\\nAt\\xE9 l\\xE1! \\uD83D\\uDC4B\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/introduzindo-o-babel/","title":"Por que precisamos do Babel?","tags":[],"keywords":[],"date":"September 15, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"959f1377-a10b-563e-8f71-890e5e6dcd66","excerpt":"Recentemente precisei implementar um menu de navegação para um  PWA . Como estava\nfazendo do zero, sem nenhuma biblioteca de UI como…","slug":"/sidebar-com-react/","title":"Criando uma SideBar com React","date":"May 27, 2020"},"next":null},"pageContext":{"id":"00b1614f-898c-51d0-a304-50b441e029ca","previousId":"959f1377-a10b-563e-8f71-890e5e6dcd66"}},"staticQueryHashes":["4198970465","764694655"]}